# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-12-02 17:59
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import home.support.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=30, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('contact', models.CharField(default=0, help_text='Enter User Phone number', max_length=45)),
                ('account_id', models.CharField(default=home.support.validators.get_id, help_text='Unique Account Number for user', max_length=15, unique=True)),
                ('address', models.CharField(help_text='Where the user currently lives/stays', max_length=255)),
                ('photo', models.ImageField(blank=True, db_column='photo', help_text='upload user photo for identity', upload_to='user_photos', validators=[home.support.validators.FileValidator(allowed_extensions=['png', 'jpg', 'jpeg'], allowed_mimetypes=['image/png', 'image/jpg', 'image/jpeg'], max_size=5242880, min_size=1)])),
                ('user_type', models.CharField(choices=[('admin', 'Administrator. User will have most of the rites to access this application unless specified otherwise'), ('member', 'Other Member. Has only the permissions you assign ')], default='member', help_text='Type of user designates if admin or other member', max_length=255)),
                ('user_status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancel Request'), ('deleted', 'Exited / delete'), ('pending', 'Pending Approval')], default='pending', help_text='select the current status of the user', max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['first_name', 'last_name', 'account_id'],
                'abstract': False,
                'verbose_name_plural': 'users',
                'default_permissions': ('add', 'delete', 'modify', 'view'),
                'verbose_name': 'user',
                'permissions': (('can_not_do_much', 'Just a member'),),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
